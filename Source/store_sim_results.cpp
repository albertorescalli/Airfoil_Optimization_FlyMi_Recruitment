/*
    This file defines a function to read and store the results of an airfoil simulation 
    from a file generated by xfoil. The function reads key values such as angle of attack (alpha), 
    lift coefficient (cL), and drag coefficient (cD), and then computes the efficiency (cL/cD) 
    for each alpha step. The data is stored in pre-allocated arrays for further analysis.
*/

#include "../Header/simulate_airfoil.h"
#include "../Header/config_settings.h"
#include "../Header/store_sim_results.h"

#include <fstream>
#include <sstream>
#include <iostream>
#include <vector>

// Calculate the number of steps in the alpha range (from alphaStart to alphaEnd)
size_t numAlphaSteps = static_cast<size_t>((alphaEnd - alphaStart) / alphaIncrement) + 1;

// Vectors to store values for each angle of attack (alpha), lift coefficient (cL), drag coefficient (cD),
// and efficiency (cL/cD) for each simulation result
std::vector<double> alpha(numAlphaSteps);
std::vector<double> cL(numAlphaSteps);
std::vector<double> cD(numAlphaSteps);
std::vector<double> efficiency(numAlphaSteps);      // Efficiency is defined as cL/cD

// Function to read simulation results from the output file generated by xfoil.
// The first 12 lines are skipped because they contain headers and metadata
void storeSimulationResults() {
    // Open the file that contains the simulation results
    std::ifstream inputFile("Output/" + simDataFile);       // simDataFile is defined globally in simulate_airfoil.h

    // Check if the file was opened successfully
    if (!inputFile.is_open()) {
        // If the file couldn't be opened, print an error message and exit the program
        std::cerr << "\nERROR: Could not open file '" << simDataFile << "'." << std::endl;
        exit(1);
    }

    std::string line;           // Temporary string to store each line of the file
    int lineNumber = 0;         // Line counter to keep track of the current line number
    int ignoreLines = 12;       // Number of lines to skip (header information in the file)

    // Skip the first 12 lines (file headers, metadata, etc.)
    while (lineNumber < ignoreLines && std::getline(inputFile, line)) {
        lineNumber++;           // Increment line counter for each skipped line
    }

    // Read the rest of the file, extracting data for each alpha step
    size_t i = 0;       // Counter for storing values in the arrays

    while (std::getline(inputFile, line) && i < numAlphaSteps) {
        std::istringstream ss(line);                // Create a string stream to parse the line
        double alphaValue, cLValue, cDValue;        // Variables to store the parsed values

        // Parse alpha, cL, and cD from the line
        if (ss >> alphaValue >> cLValue >> cDValue) {
            // Store the parsed values into the respective arrays
            alpha[i] = alphaValue;                  // Store angle of attack (alpha)
            cL[i] = cLValue;                        // Store lift coefficient (cL)
            cD[i] = cDValue;                        // Store drag coefficient (cD)
            efficiency[i] = cLValue / cDValue;      // Calculate and store efficiency (cL/cD)
            i++;            // Move to the next index in the arrays
        } 
        else {
            // If parsing fails, print a warning message with the problematic line
            std::cerr << "\nWarning: Failure reading values from line: " << line << std::endl;
        }
    }

    // If no valid data was read, print an error message and exit the program
    if (i == 0) {
        std::cerr << "\nERROR: Convergence failed for every alpha value." << std::endl;
        exit(1);        // Exit the program if no valid results were obtained
    }
    // If fewer lines than expected were read, warn the user about convergence issues
    else if (i < numAlphaSteps) {
        std::cerr << "\nWarning: Convergence failed for " << (numAlphaSteps - i) <<" alpha value(s)." << std::endl; 
    }

    // Close the input file after processing all lines
    inputFile.close();
}